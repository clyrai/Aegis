name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write
  packages: write
  security-events: write

jobs:
  build-sign-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract version
        id: vars
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image (multi-arch)
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.version }}
            ghcr.io/${{ github.repository }}:latest

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: 'v2.2.4'

      - name: Sign container image (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.version }}
          cosign sign ghcr.io/${{ github.repository }}:latest

      - name: Generate SBOM (image)
        uses: anchore/sbom-action@v0.17.6
        with:
          image: ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.version }}
          artifact-name: sbom-image-${{ steps.vars.outputs.version }}.spdx.json
          format: spdx-json

      - name: Trivy Image scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.version }}
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '0'

      - name: Upload Trivy SARIF (Image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Package Helm chart
        run: |
          helm lint deploy/helm/aegis
          helm package deploy/helm/aegis --version ${{ steps.vars.outputs.version }} --app-version ${{ steps.vars.outputs.version }} --destination dist
      - name: Push Helm chart to GHCR (OCI)
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          CHART_REF=oci://ghcr.io/${{ github.repository }}/charts
          helm push dist/aegis-${{ steps.vars.outputs.version }}.tgz $CHART_REF
      - name: Sign Helm chart (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign ghcr.io/${{ github.repository }}/charts/aegis:${{ steps.vars.outputs.version }}

      - name: Upload chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: dist/*.tgz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          name: Aegis ${{ steps.vars.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/*.tgz
            sbom-image-${{ steps.vars.outputs.version }}.spdx.json